<?php
/**
 * FreightPickupRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  UPS\TForceFreightPickup
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Freight Pickup
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UPS\TForceFreightPickup\TForceFreightPickup;

use \ArrayAccess;
use \UPS\TForceFreightPickup\ObjectSerializer;

/**
 * FreightPickupRequest Class Doc Comment
 *
 * @category Class
 * @package  UPS\TForceFreightPickup
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FreightPickupRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FreightPickupRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'request' => '\UPS\TForceFreightPickup\TForceFreightPickup\FreightPickupRequestRequest',
        'pickup_request_confirmation_number' => 'string',
        'destination_postal_code' => 'string',
        'destination_country_code' => 'string',
        'requester' => '\UPS\TForceFreightPickup\TForceFreightPickup\FreightPickupRequestRequester',
        'ship_from' => '\UPS\TForceFreightPickup\TForceFreightPickup\FreightPickupRequestShipFrom',
        'ship_to' => '\UPS\TForceFreightPickup\TForceFreightPickup\FreightPickupRequestShipTo',
        'pickup_date' => 'string',
        'earliest_time_ready' => 'string',
        'latest_time_ready' => 'string',
        'shipment_service_options' => '\UPS\TForceFreightPickup\TForceFreightPickup\FreightPickupRequestShipmentServiceOptions',
        'shipment_detail' => '\UPS\TForceFreightPickup\TForceFreightPickup\FreightPickupRequestShipmentDetail[]',
        'existing_shipment_id' => '\UPS\TForceFreightPickup\TForceFreightPickup\FreightPickupRequestExistingShipmentID',
        'pom' => '\UPS\TForceFreightPickup\TForceFreightPickup\FreightPickupRequestPOM',
        'pickup_instructions' => 'string',
        'additional_comments' => 'string',
        'handling_instructions' => 'string',
        'special_instructions' => 'string',
        'delivery_instructions' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'request' => null,
        'pickup_request_confirmation_number' => null,
        'destination_postal_code' => null,
        'destination_country_code' => null,
        'requester' => null,
        'ship_from' => null,
        'ship_to' => null,
        'pickup_date' => null,
        'earliest_time_ready' => null,
        'latest_time_ready' => null,
        'shipment_service_options' => null,
        'shipment_detail' => null,
        'existing_shipment_id' => null,
        'pom' => null,
        'pickup_instructions' => null,
        'additional_comments' => null,
        'handling_instructions' => null,
        'special_instructions' => null,
        'delivery_instructions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'request' => 'Request',
        'pickup_request_confirmation_number' => 'PickupRequestConfirmationNumber',
        'destination_postal_code' => 'DestinationPostalCode',
        'destination_country_code' => 'DestinationCountryCode',
        'requester' => 'Requester',
        'ship_from' => 'ShipFrom',
        'ship_to' => 'ShipTo',
        'pickup_date' => 'PickupDate',
        'earliest_time_ready' => 'EarliestTimeReady',
        'latest_time_ready' => 'LatestTimeReady',
        'shipment_service_options' => 'ShipmentServiceOptions',
        'shipment_detail' => 'ShipmentDetail',
        'existing_shipment_id' => 'ExistingShipmentID',
        'pom' => 'POM',
        'pickup_instructions' => 'PickupInstructions',
        'additional_comments' => 'AdditionalComments',
        'handling_instructions' => 'HandlingInstructions',
        'special_instructions' => 'SpecialInstructions',
        'delivery_instructions' => 'DeliveryInstructions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'request' => 'setRequest',
        'pickup_request_confirmation_number' => 'setPickupRequestConfirmationNumber',
        'destination_postal_code' => 'setDestinationPostalCode',
        'destination_country_code' => 'setDestinationCountryCode',
        'requester' => 'setRequester',
        'ship_from' => 'setShipFrom',
        'ship_to' => 'setShipTo',
        'pickup_date' => 'setPickupDate',
        'earliest_time_ready' => 'setEarliestTimeReady',
        'latest_time_ready' => 'setLatestTimeReady',
        'shipment_service_options' => 'setShipmentServiceOptions',
        'shipment_detail' => 'setShipmentDetail',
        'existing_shipment_id' => 'setExistingShipmentId',
        'pom' => 'setPom',
        'pickup_instructions' => 'setPickupInstructions',
        'additional_comments' => 'setAdditionalComments',
        'handling_instructions' => 'setHandlingInstructions',
        'special_instructions' => 'setSpecialInstructions',
        'delivery_instructions' => 'setDeliveryInstructions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'request' => 'getRequest',
        'pickup_request_confirmation_number' => 'getPickupRequestConfirmationNumber',
        'destination_postal_code' => 'getDestinationPostalCode',
        'destination_country_code' => 'getDestinationCountryCode',
        'requester' => 'getRequester',
        'ship_from' => 'getShipFrom',
        'ship_to' => 'getShipTo',
        'pickup_date' => 'getPickupDate',
        'earliest_time_ready' => 'getEarliestTimeReady',
        'latest_time_ready' => 'getLatestTimeReady',
        'shipment_service_options' => 'getShipmentServiceOptions',
        'shipment_detail' => 'getShipmentDetail',
        'existing_shipment_id' => 'getExistingShipmentId',
        'pom' => 'getPom',
        'pickup_instructions' => 'getPickupInstructions',
        'additional_comments' => 'getAdditionalComments',
        'handling_instructions' => 'getHandlingInstructions',
        'special_instructions' => 'getSpecialInstructions',
        'delivery_instructions' => 'getDeliveryInstructions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['request'] = isset($data['request']) ? $data['request'] : null;
        $this->container['pickup_request_confirmation_number'] = isset($data['pickup_request_confirmation_number']) ? $data['pickup_request_confirmation_number'] : null;
        $this->container['destination_postal_code'] = isset($data['destination_postal_code']) ? $data['destination_postal_code'] : null;
        $this->container['destination_country_code'] = isset($data['destination_country_code']) ? $data['destination_country_code'] : null;
        $this->container['requester'] = isset($data['requester']) ? $data['requester'] : null;
        $this->container['ship_from'] = isset($data['ship_from']) ? $data['ship_from'] : null;
        $this->container['ship_to'] = isset($data['ship_to']) ? $data['ship_to'] : null;
        $this->container['pickup_date'] = isset($data['pickup_date']) ? $data['pickup_date'] : null;
        $this->container['earliest_time_ready'] = isset($data['earliest_time_ready']) ? $data['earliest_time_ready'] : null;
        $this->container['latest_time_ready'] = isset($data['latest_time_ready']) ? $data['latest_time_ready'] : null;
        $this->container['shipment_service_options'] = isset($data['shipment_service_options']) ? $data['shipment_service_options'] : null;
        $this->container['shipment_detail'] = isset($data['shipment_detail']) ? $data['shipment_detail'] : null;
        $this->container['existing_shipment_id'] = isset($data['existing_shipment_id']) ? $data['existing_shipment_id'] : null;
        $this->container['pom'] = isset($data['pom']) ? $data['pom'] : null;
        $this->container['pickup_instructions'] = isset($data['pickup_instructions']) ? $data['pickup_instructions'] : null;
        $this->container['additional_comments'] = isset($data['additional_comments']) ? $data['additional_comments'] : null;
        $this->container['handling_instructions'] = isset($data['handling_instructions']) ? $data['handling_instructions'] : null;
        $this->container['special_instructions'] = isset($data['special_instructions']) ? $data['special_instructions'] : null;
        $this->container['delivery_instructions'] = isset($data['delivery_instructions']) ? $data['delivery_instructions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['request'] === null) {
            $invalidProperties[] = "'request' can't be null";
        }
        if ($this->container['destination_country_code'] === null) {
            $invalidProperties[] = "'destination_country_code' can't be null";
        }
        if ($this->container['requester'] === null) {
            $invalidProperties[] = "'requester' can't be null";
        }
        if ($this->container['ship_from'] === null) {
            $invalidProperties[] = "'ship_from' can't be null";
        }
        if ($this->container['pickup_date'] === null) {
            $invalidProperties[] = "'pickup_date' can't be null";
        }
        if ($this->container['earliest_time_ready'] === null) {
            $invalidProperties[] = "'earliest_time_ready' can't be null";
        }
        if ($this->container['latest_time_ready'] === null) {
            $invalidProperties[] = "'latest_time_ready' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets request
     *
     * @return \UPS\TForceFreightPickup\TForceFreightPickup\FreightPickupRequestRequest
     */
    public function getRequest()
    {
        return $this->container['request'];
    }

    /**
     * Sets request
     *
     * @param \UPS\TForceFreightPickup\TForceFreightPickup\FreightPickupRequestRequest $request request
     *
     * @return $this
     */
    public function setRequest($request)
    {
        $this->container['request'] = $request;

        return $this;
    }

    /**
     * Gets pickup_request_confirmation_number
     *
     * @return string
     */
    public function getPickupRequestConfirmationNumber()
    {
        return $this->container['pickup_request_confirmation_number'];
    }

    /**
     * Sets pickup_request_confirmation_number
     *
     * @param string $pickup_request_confirmation_number Confirmation number of pickup ground freight shipment to modify.� Only use if requesting a pickup modification. If this element is populated, it must contain a valid confirmation number and all previously supplied populated elements in the original request must be present.
     *
     * @return $this
     */
    public function setPickupRequestConfirmationNumber($pickup_request_confirmation_number)
    {
        $this->container['pickup_request_confirmation_number'] = $pickup_request_confirmation_number;

        return $this;
    }

    /**
     * Gets destination_postal_code
     *
     * @return string
     */
    public function getDestinationPostalCode()
    {
        return $this->container['destination_postal_code'];
    }

    /**
     * Sets destination_postal_code
     *
     * @param string $destination_postal_code Destinations postal code.
     *
     * @return $this
     */
    public function setDestinationPostalCode($destination_postal_code)
    {
        $this->container['destination_postal_code'] = $destination_postal_code;

        return $this;
    }

    /**
     * Gets destination_country_code
     *
     * @return string
     */
    public function getDestinationCountryCode()
    {
        return $this->container['destination_country_code'];
    }

    /**
     * Sets destination_country_code
     *
     * @param string $destination_country_code Destinations country code.
     *
     * @return $this
     */
    public function setDestinationCountryCode($destination_country_code)
    {
        $this->container['destination_country_code'] = $destination_country_code;

        return $this;
    }

    /**
     * Gets requester
     *
     * @return \UPS\TForceFreightPickup\TForceFreightPickup\FreightPickupRequestRequester
     */
    public function getRequester()
    {
        return $this->container['requester'];
    }

    /**
     * Sets requester
     *
     * @param \UPS\TForceFreightPickup\TForceFreightPickup\FreightPickupRequestRequester $requester requester
     *
     * @return $this
     */
    public function setRequester($requester)
    {
        $this->container['requester'] = $requester;

        return $this;
    }

    /**
     * Gets ship_from
     *
     * @return \UPS\TForceFreightPickup\TForceFreightPickup\FreightPickupRequestShipFrom
     */
    public function getShipFrom()
    {
        return $this->container['ship_from'];
    }

    /**
     * Sets ship_from
     *
     * @param \UPS\TForceFreightPickup\TForceFreightPickup\FreightPickupRequestShipFrom $ship_from ship_from
     *
     * @return $this
     */
    public function setShipFrom($ship_from)
    {
        $this->container['ship_from'] = $ship_from;

        return $this;
    }

    /**
     * Gets ship_to
     *
     * @return \UPS\TForceFreightPickup\TForceFreightPickup\FreightPickupRequestShipTo
     */
    public function getShipTo()
    {
        return $this->container['ship_to'];
    }

    /**
     * Sets ship_to
     *
     * @param \UPS\TForceFreightPickup\TForceFreightPickup\FreightPickupRequestShipTo $ship_to ship_to
     *
     * @return $this
     */
    public function setShipTo($ship_to)
    {
        $this->container['ship_to'] = $ship_to;

        return $this;
    }

    /**
     * Gets pickup_date
     *
     * @return string
     */
    public function getPickupDate()
    {
        return $this->container['pickup_date'];
    }

    /**
     * Sets pickup_date
     *
     * @param string $pickup_date Date of the Pickup.  Format:YYYYMMDD
     *
     * @return $this
     */
    public function setPickupDate($pickup_date)
    {
        $this->container['pickup_date'] = $pickup_date;

        return $this;
    }

    /**
     * Gets earliest_time_ready
     *
     * @return string
     */
    public function getEarliestTimeReady()
    {
        return $this->container['earliest_time_ready'];
    }

    /**
     * Sets earliest_time_ready
     *
     * @param string $earliest_time_ready The earliest time a shipment is ready to be picked up. The time is on a 24 hour clock.  Format: HHMM HH = Hour values 00 to 23 MM = Minute values 00 to 59
     *
     * @return $this
     */
    public function setEarliestTimeReady($earliest_time_ready)
    {
        $this->container['earliest_time_ready'] = $earliest_time_ready;

        return $this;
    }

    /**
     * Gets latest_time_ready
     *
     * @return string
     */
    public function getLatestTimeReady()
    {
        return $this->container['latest_time_ready'];
    }

    /**
     * Sets latest_time_ready
     *
     * @param string $latest_time_ready The latest time a shipment can be picked up. Can be also referred as the Closing Time for a pickup time window. The time is on a 24 hour clock.  Format: HHMM HH = Hour values 00 to 23 MM = Minute values 00 to 59
     *
     * @return $this
     */
    public function setLatestTimeReady($latest_time_ready)
    {
        $this->container['latest_time_ready'] = $latest_time_ready;

        return $this;
    }

    /**
     * Gets shipment_service_options
     *
     * @return \UPS\TForceFreightPickup\TForceFreightPickup\FreightPickupRequestShipmentServiceOptions
     */
    public function getShipmentServiceOptions()
    {
        return $this->container['shipment_service_options'];
    }

    /**
     * Sets shipment_service_options
     *
     * @param \UPS\TForceFreightPickup\TForceFreightPickup\FreightPickupRequestShipmentServiceOptions $shipment_service_options shipment_service_options
     *
     * @return $this
     */
    public function setShipmentServiceOptions($shipment_service_options)
    {
        $this->container['shipment_service_options'] = $shipment_service_options;

        return $this;
    }

    /**
     * Gets shipment_detail
     *
     * @return \UPS\TForceFreightPickup\TForceFreightPickup\FreightPickupRequestShipmentDetail[]
     */
    public function getShipmentDetail()
    {
        return $this->container['shipment_detail'];
    }

    /**
     * Sets shipment_detail
     *
     * @param \UPS\TForceFreightPickup\TForceFreightPickup\FreightPickupRequestShipmentDetail[] $shipment_detail shipment_detail
     *
     * @return $this
     */
    public function setShipmentDetail($shipment_detail)
    {
        $this->container['shipment_detail'] = $shipment_detail;

        return $this;
    }

    /**
     * Gets existing_shipment_id
     *
     * @return \UPS\TForceFreightPickup\TForceFreightPickup\FreightPickupRequestExistingShipmentID
     */
    public function getExistingShipmentId()
    {
        return $this->container['existing_shipment_id'];
    }

    /**
     * Sets existing_shipment_id
     *
     * @param \UPS\TForceFreightPickup\TForceFreightPickup\FreightPickupRequestExistingShipmentID $existing_shipment_id existing_shipment_id
     *
     * @return $this
     */
    public function setExistingShipmentId($existing_shipment_id)
    {
        $this->container['existing_shipment_id'] = $existing_shipment_id;

        return $this;
    }

    /**
     * Gets pom
     *
     * @return \UPS\TForceFreightPickup\TForceFreightPickup\FreightPickupRequestPOM
     */
    public function getPom()
    {
        return $this->container['pom'];
    }

    /**
     * Sets pom
     *
     * @param \UPS\TForceFreightPickup\TForceFreightPickup\FreightPickupRequestPOM $pom pom
     *
     * @return $this
     */
    public function setPom($pom)
    {
        $this->container['pom'] = $pom;

        return $this;
    }

    /**
     * Gets pickup_instructions
     *
     * @return string
     */
    public function getPickupInstructions()
    {
        return $this->container['pickup_instructions'];
    }

    /**
     * Sets pickup_instructions
     *
     * @param string $pickup_instructions Pickup Instructions.
     *
     * @return $this
     */
    public function setPickupInstructions($pickup_instructions)
    {
        $this->container['pickup_instructions'] = $pickup_instructions;

        return $this;
    }

    /**
     * Gets additional_comments
     *
     * @return string
     */
    public function getAdditionalComments()
    {
        return $this->container['additional_comments'];
    }

    /**
     * Sets additional_comments
     *
     * @param string $additional_comments The location of the freight. Example: Loading Dock A
     *
     * @return $this
     */
    public function setAdditionalComments($additional_comments)
    {
        $this->container['additional_comments'] = $additional_comments;

        return $this;
    }

    /**
     * Gets handling_instructions
     *
     * @return string
     */
    public function getHandlingInstructions()
    {
        return $this->container['handling_instructions'];
    }

    /**
     * Sets handling_instructions
     *
     * @param string $handling_instructions Handling Instructions text
     *
     * @return $this
     */
    public function setHandlingInstructions($handling_instructions)
    {
        $this->container['handling_instructions'] = $handling_instructions;

        return $this;
    }

    /**
     * Gets special_instructions
     *
     * @return string
     */
    public function getSpecialInstructions()
    {
        return $this->container['special_instructions'];
    }

    /**
     * Sets special_instructions
     *
     * @param string $special_instructions Special Instructions text
     *
     * @return $this
     */
    public function setSpecialInstructions($special_instructions)
    {
        $this->container['special_instructions'] = $special_instructions;

        return $this;
    }

    /**
     * Gets delivery_instructions
     *
     * @return string
     */
    public function getDeliveryInstructions()
    {
        return $this->container['delivery_instructions'];
    }

    /**
     * Sets delivery_instructions
     *
     * @param string $delivery_instructions Delivery Instructions text
     *
     * @return $this
     */
    public function setDeliveryInstructions($delivery_instructions)
    {
        $this->container['delivery_instructions'] = $delivery_instructions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
