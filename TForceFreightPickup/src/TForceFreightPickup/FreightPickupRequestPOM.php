<?php
/**
 * FreightPickupRequestPOM
 *
 * PHP version 5
 *
 * @category Class
 * @package  UPS\TForceFreightPickup
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Freight Pickup
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UPS\TForceFreightPickup\TForceFreightPickup;

use \ArrayAccess;
use \UPS\TForceFreightPickup\ObjectSerializer;

/**
 * FreightPickupRequestPOM Class Doc Comment
 *
 * @category Class
 * @description An identifier associated to the pickup request when the user elects to include Pickup Notifications for LTL.
 * @package  UPS\TForceFreightPickup
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FreightPickupRequestPOM implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FreightPickupRequest_POM';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'pom_number' => 'string',
        'pom_number_type' => 'string',
        'pickup_notifications' => '\UPS\TForceFreightPickup\TForceFreightPickup\POMPickupNotifications'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'pom_number' => null,
        'pom_number_type' => null,
        'pickup_notifications' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pom_number' => 'POMNumber',
        'pom_number_type' => 'POMNumberType',
        'pickup_notifications' => 'PickupNotifications'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pom_number' => 'setPomNumber',
        'pom_number_type' => 'setPomNumberType',
        'pickup_notifications' => 'setPickupNotifications'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pom_number' => 'getPomNumber',
        'pom_number_type' => 'getPomNumberType',
        'pickup_notifications' => 'getPickupNotifications'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pom_number'] = isset($data['pom_number']) ? $data['pom_number'] : null;
        $this->container['pom_number_type'] = isset($data['pom_number_type']) ? $data['pom_number_type'] : null;
        $this->container['pickup_notifications'] = isset($data['pickup_notifications']) ? $data['pickup_notifications'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pom_number
     *
     * @return string
     */
    public function getPomNumber()
    {
        return $this->container['pom_number'];
    }

    /**
     * Sets pom_number
     *
     * @param string $pom_number Identifies the kind of number used to identify the Pickup Notifications for LTL shipment. Must provide a POMNumber if the POMNumberType field is populated.
     *
     * @return $this
     */
    public function setPomNumber($pom_number)
    {
        $this->container['pom_number'] = $pom_number;

        return $this;
    }

    /**
     * Gets pom_number_type
     *
     * @return string
     */
    public function getPomNumberType()
    {
        return $this->container['pom_number_type'];
    }

    /**
     * Sets pom_number_type
     *
     * @param string $pom_number_type Identifies the type used to identify the Pickup Notifications for LTL shipments.  Must provide if POMNumber is populated. For valid values, see POMNumberType Values in the Appendix.  The values must match a type defined, case sensitive.
     *
     * @return $this
     */
    public function setPomNumberType($pom_number_type)
    {
        $this->container['pom_number_type'] = $pom_number_type;

        return $this;
    }

    /**
     * Gets pickup_notifications
     *
     * @return \UPS\TForceFreightPickup\TForceFreightPickup\POMPickupNotifications
     */
    public function getPickupNotifications()
    {
        return $this->container['pickup_notifications'];
    }

    /**
     * Sets pickup_notifications
     *
     * @param \UPS\TForceFreightPickup\TForceFreightPickup\POMPickupNotifications $pickup_notifications pickup_notifications
     *
     * @return $this
     */
    public function setPickupNotifications($pickup_notifications)
    {
        $this->container['pickup_notifications'] = $pickup_notifications;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
