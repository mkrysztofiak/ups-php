<?php
/**
 * FreightRateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  UPS\TForceFreightRating
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Freight Rate
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UPS\TForceFreightRating\TForceFreightRating;

use \ArrayAccess;
use \UPS\TForceFreightRating\ObjectSerializer;

/**
 * FreightRateRequest Class Doc Comment
 *
 * @category Class
 * @description Freight Rate Request Container.
 * @package  UPS\TForceFreightRating
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FreightRateRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FreightRateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'request' => '\UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestRequest',
        'ship_from' => '\UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestShipFrom',
        'ship_to' => '\UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestShipTo',
        'payment_information' => '\UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestPaymentInformation',
        'service' => '\UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestService',
        'handling_unit_one' => '\UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestHandlingUnitOne',
        'handling_unit_two' => '\UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestHandlingUnitTwo',
        'commodity' => '\UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestCommodity[]',
        'shipment_service_options' => '\UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestShipmentServiceOptions',
        'pickup_request' => '\UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestPickupRequest',
        'alternate_rate_options' => '\UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestAlternateRateOptions',
        'gfp_options' => '\UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestGFPOptions',
        'handling_unit_weight' => '\UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestHandlingUnitWeight',
        'adjusted_weight_indicator' => 'string',
        'time_in_transit_indicator' => 'string',
        'handling_units' => '\UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestHandlingUnits[]',
        'adjusted_height_indicator' => 'string',
        'density_eligible_indicator' => 'string',
        'quote_number_indicator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'request' => null,
        'ship_from' => null,
        'ship_to' => null,
        'payment_information' => null,
        'service' => null,
        'handling_unit_one' => null,
        'handling_unit_two' => null,
        'commodity' => null,
        'shipment_service_options' => null,
        'pickup_request' => null,
        'alternate_rate_options' => null,
        'gfp_options' => null,
        'handling_unit_weight' => null,
        'adjusted_weight_indicator' => null,
        'time_in_transit_indicator' => null,
        'handling_units' => null,
        'adjusted_height_indicator' => null,
        'density_eligible_indicator' => null,
        'quote_number_indicator' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'request' => 'Request',
        'ship_from' => 'ShipFrom',
        'ship_to' => 'ShipTo',
        'payment_information' => 'PaymentInformation',
        'service' => 'Service',
        'handling_unit_one' => 'HandlingUnitOne',
        'handling_unit_two' => 'HandlingUnitTwo',
        'commodity' => 'Commodity',
        'shipment_service_options' => 'ShipmentServiceOptions',
        'pickup_request' => 'PickupRequest',
        'alternate_rate_options' => 'AlternateRateOptions',
        'gfp_options' => 'GFPOptions',
        'handling_unit_weight' => 'HandlingUnitWeight',
        'adjusted_weight_indicator' => 'AdjustedWeightIndicator',
        'time_in_transit_indicator' => 'TimeInTransitIndicator',
        'handling_units' => 'HandlingUnits',
        'adjusted_height_indicator' => 'AdjustedHeightIndicator',
        'density_eligible_indicator' => 'DensityEligibleIndicator',
        'quote_number_indicator' => 'QuoteNumberIndicator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'request' => 'setRequest',
        'ship_from' => 'setShipFrom',
        'ship_to' => 'setShipTo',
        'payment_information' => 'setPaymentInformation',
        'service' => 'setService',
        'handling_unit_one' => 'setHandlingUnitOne',
        'handling_unit_two' => 'setHandlingUnitTwo',
        'commodity' => 'setCommodity',
        'shipment_service_options' => 'setShipmentServiceOptions',
        'pickup_request' => 'setPickupRequest',
        'alternate_rate_options' => 'setAlternateRateOptions',
        'gfp_options' => 'setGfpOptions',
        'handling_unit_weight' => 'setHandlingUnitWeight',
        'adjusted_weight_indicator' => 'setAdjustedWeightIndicator',
        'time_in_transit_indicator' => 'setTimeInTransitIndicator',
        'handling_units' => 'setHandlingUnits',
        'adjusted_height_indicator' => 'setAdjustedHeightIndicator',
        'density_eligible_indicator' => 'setDensityEligibleIndicator',
        'quote_number_indicator' => 'setQuoteNumberIndicator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'request' => 'getRequest',
        'ship_from' => 'getShipFrom',
        'ship_to' => 'getShipTo',
        'payment_information' => 'getPaymentInformation',
        'service' => 'getService',
        'handling_unit_one' => 'getHandlingUnitOne',
        'handling_unit_two' => 'getHandlingUnitTwo',
        'commodity' => 'getCommodity',
        'shipment_service_options' => 'getShipmentServiceOptions',
        'pickup_request' => 'getPickupRequest',
        'alternate_rate_options' => 'getAlternateRateOptions',
        'gfp_options' => 'getGfpOptions',
        'handling_unit_weight' => 'getHandlingUnitWeight',
        'adjusted_weight_indicator' => 'getAdjustedWeightIndicator',
        'time_in_transit_indicator' => 'getTimeInTransitIndicator',
        'handling_units' => 'getHandlingUnits',
        'adjusted_height_indicator' => 'getAdjustedHeightIndicator',
        'density_eligible_indicator' => 'getDensityEligibleIndicator',
        'quote_number_indicator' => 'getQuoteNumberIndicator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['request'] = isset($data['request']) ? $data['request'] : null;
        $this->container['ship_from'] = isset($data['ship_from']) ? $data['ship_from'] : null;
        $this->container['ship_to'] = isset($data['ship_to']) ? $data['ship_to'] : null;
        $this->container['payment_information'] = isset($data['payment_information']) ? $data['payment_information'] : null;
        $this->container['service'] = isset($data['service']) ? $data['service'] : null;
        $this->container['handling_unit_one'] = isset($data['handling_unit_one']) ? $data['handling_unit_one'] : null;
        $this->container['handling_unit_two'] = isset($data['handling_unit_two']) ? $data['handling_unit_two'] : null;
        $this->container['commodity'] = isset($data['commodity']) ? $data['commodity'] : null;
        $this->container['shipment_service_options'] = isset($data['shipment_service_options']) ? $data['shipment_service_options'] : null;
        $this->container['pickup_request'] = isset($data['pickup_request']) ? $data['pickup_request'] : null;
        $this->container['alternate_rate_options'] = isset($data['alternate_rate_options']) ? $data['alternate_rate_options'] : null;
        $this->container['gfp_options'] = isset($data['gfp_options']) ? $data['gfp_options'] : null;
        $this->container['handling_unit_weight'] = isset($data['handling_unit_weight']) ? $data['handling_unit_weight'] : null;
        $this->container['adjusted_weight_indicator'] = isset($data['adjusted_weight_indicator']) ? $data['adjusted_weight_indicator'] : null;
        $this->container['time_in_transit_indicator'] = isset($data['time_in_transit_indicator']) ? $data['time_in_transit_indicator'] : null;
        $this->container['handling_units'] = isset($data['handling_units']) ? $data['handling_units'] : null;
        $this->container['adjusted_height_indicator'] = isset($data['adjusted_height_indicator']) ? $data['adjusted_height_indicator'] : null;
        $this->container['density_eligible_indicator'] = isset($data['density_eligible_indicator']) ? $data['density_eligible_indicator'] : null;
        $this->container['quote_number_indicator'] = isset($data['quote_number_indicator']) ? $data['quote_number_indicator'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['request'] === null) {
            $invalidProperties[] = "'request' can't be null";
        }
        if ($this->container['ship_from'] === null) {
            $invalidProperties[] = "'ship_from' can't be null";
        }
        if ($this->container['ship_to'] === null) {
            $invalidProperties[] = "'ship_to' can't be null";
        }
        if ($this->container['payment_information'] === null) {
            $invalidProperties[] = "'payment_information' can't be null";
        }
        if ($this->container['service'] === null) {
            $invalidProperties[] = "'service' can't be null";
        }
        if ($this->container['commodity'] === null) {
            $invalidProperties[] = "'commodity' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets request
     *
     * @return \UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestRequest
     */
    public function getRequest()
    {
        return $this->container['request'];
    }

    /**
     * Sets request
     *
     * @param \UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestRequest $request request
     *
     * @return $this
     */
    public function setRequest($request)
    {
        $this->container['request'] = $request;

        return $this;
    }

    /**
     * Gets ship_from
     *
     * @return \UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestShipFrom
     */
    public function getShipFrom()
    {
        return $this->container['ship_from'];
    }

    /**
     * Sets ship_from
     *
     * @param \UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestShipFrom $ship_from ship_from
     *
     * @return $this
     */
    public function setShipFrom($ship_from)
    {
        $this->container['ship_from'] = $ship_from;

        return $this;
    }

    /**
     * Gets ship_to
     *
     * @return \UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestShipTo
     */
    public function getShipTo()
    {
        return $this->container['ship_to'];
    }

    /**
     * Sets ship_to
     *
     * @param \UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestShipTo $ship_to ship_to
     *
     * @return $this
     */
    public function setShipTo($ship_to)
    {
        $this->container['ship_to'] = $ship_to;

        return $this;
    }

    /**
     * Gets payment_information
     *
     * @return \UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestPaymentInformation
     */
    public function getPaymentInformation()
    {
        return $this->container['payment_information'];
    }

    /**
     * Sets payment_information
     *
     * @param \UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestPaymentInformation $payment_information payment_information
     *
     * @return $this
     */
    public function setPaymentInformation($payment_information)
    {
        $this->container['payment_information'] = $payment_information;

        return $this;
    }

    /**
     * Gets service
     *
     * @return \UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestService
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     *
     * @param \UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestService $service service
     *
     * @return $this
     */
    public function setService($service)
    {
        $this->container['service'] = $service;

        return $this;
    }

    /**
     * Gets handling_unit_one
     *
     * @return \UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestHandlingUnitOne
     */
    public function getHandlingUnitOne()
    {
        return $this->container['handling_unit_one'];
    }

    /**
     * Sets handling_unit_one
     *
     * @param \UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestHandlingUnitOne $handling_unit_one handling_unit_one
     *
     * @return $this
     */
    public function setHandlingUnitOne($handling_unit_one)
    {
        $this->container['handling_unit_one'] = $handling_unit_one;

        return $this;
    }

    /**
     * Gets handling_unit_two
     *
     * @return \UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestHandlingUnitTwo
     */
    public function getHandlingUnitTwo()
    {
        return $this->container['handling_unit_two'];
    }

    /**
     * Sets handling_unit_two
     *
     * @param \UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestHandlingUnitTwo $handling_unit_two handling_unit_two
     *
     * @return $this
     */
    public function setHandlingUnitTwo($handling_unit_two)
    {
        $this->container['handling_unit_two'] = $handling_unit_two;

        return $this;
    }

    /**
     * Gets commodity
     *
     * @return \UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestCommodity[]
     */
    public function getCommodity()
    {
        return $this->container['commodity'];
    }

    /**
     * Sets commodity
     *
     * @param \UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestCommodity[] $commodity commodity
     *
     * @return $this
     */
    public function setCommodity($commodity)
    {
        $this->container['commodity'] = $commodity;

        return $this;
    }

    /**
     * Gets shipment_service_options
     *
     * @return \UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestShipmentServiceOptions
     */
    public function getShipmentServiceOptions()
    {
        return $this->container['shipment_service_options'];
    }

    /**
     * Sets shipment_service_options
     *
     * @param \UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestShipmentServiceOptions $shipment_service_options shipment_service_options
     *
     * @return $this
     */
    public function setShipmentServiceOptions($shipment_service_options)
    {
        $this->container['shipment_service_options'] = $shipment_service_options;

        return $this;
    }

    /**
     * Gets pickup_request
     *
     * @return \UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestPickupRequest
     */
    public function getPickupRequest()
    {
        return $this->container['pickup_request'];
    }

    /**
     * Sets pickup_request
     *
     * @param \UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestPickupRequest $pickup_request pickup_request
     *
     * @return $this
     */
    public function setPickupRequest($pickup_request)
    {
        $this->container['pickup_request'] = $pickup_request;

        return $this;
    }

    /**
     * Gets alternate_rate_options
     *
     * @return \UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestAlternateRateOptions
     */
    public function getAlternateRateOptions()
    {
        return $this->container['alternate_rate_options'];
    }

    /**
     * Sets alternate_rate_options
     *
     * @param \UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestAlternateRateOptions $alternate_rate_options alternate_rate_options
     *
     * @return $this
     */
    public function setAlternateRateOptions($alternate_rate_options)
    {
        $this->container['alternate_rate_options'] = $alternate_rate_options;

        return $this;
    }

    /**
     * Gets gfp_options
     *
     * @return \UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestGFPOptions
     */
    public function getGfpOptions()
    {
        return $this->container['gfp_options'];
    }

    /**
     * Sets gfp_options
     *
     * @param \UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestGFPOptions $gfp_options gfp_options
     *
     * @return $this
     */
    public function setGfpOptions($gfp_options)
    {
        $this->container['gfp_options'] = $gfp_options;

        return $this;
    }

    /**
     * Gets handling_unit_weight
     *
     * @return \UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestHandlingUnitWeight
     */
    public function getHandlingUnitWeight()
    {
        return $this->container['handling_unit_weight'];
    }

    /**
     * Sets handling_unit_weight
     *
     * @param \UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestHandlingUnitWeight $handling_unit_weight handling_unit_weight
     *
     * @return $this
     */
    public function setHandlingUnitWeight($handling_unit_weight)
    {
        $this->container['handling_unit_weight'] = $handling_unit_weight;

        return $this;
    }

    /**
     * Gets adjusted_weight_indicator
     *
     * @return string
     */
    public function getAdjustedWeightIndicator()
    {
        return $this->container['adjusted_weight_indicator'];
    }

    /**
     * Sets adjusted_weight_indicator
     *
     * @param string $adjusted_weight_indicator Indicator used to specify if the user wants to subtract the handling unit weight. Defaults to false.   When AdjustedWeightIndicator is set to \"true\": - If HandlingUnitWeight is present, the HandlingUnitWeight Value will be subtracted and prorated from the FreightLineItem Weight Value. The subtracted/prorated FreightLineItem Weight will be used for GFP rating. - If HandlingUnitWeight is not present and the AdjustedWeightValue is present, the adjusted weight value from the FreightLineItem object will be used to do a GFP rating request to UPGF. - If HandlingUnitWeight is not present and the AdjustedWeightValue is not present, the original weight from the FreightLineItem object will be used to do a GFP rating request to UPGF.In this case, the HandlingUnitWeight value  is assume to be zero.  AdjustedWeightIndicator set to \"false\": - The FreightLineItem.Weight will be used for both LTL and GFP rating requests (current functionality). The HandlingUnitWeight or the FreightLineItem.AdjustedWeight will not be used.
     *
     * @return $this
     */
    public function setAdjustedWeightIndicator($adjusted_weight_indicator)
    {
        $this->container['adjusted_weight_indicator'] = $adjusted_weight_indicator;

        return $this;
    }

    /**
     * Gets time_in_transit_indicator
     *
     * @return string
     */
    public function getTimeInTransitIndicator()
    {
        return $this->container['time_in_transit_indicator'];
    }

    /**
     * Sets time_in_transit_indicator
     *
     * @param string $time_in_transit_indicator Presence of the tag indicates Time in Transit information is requested and will be returned.
     *
     * @return $this
     */
    public function setTimeInTransitIndicator($time_in_transit_indicator)
    {
        $this->container['time_in_transit_indicator'] = $time_in_transit_indicator;

        return $this;
    }

    /**
     * Gets handling_units
     *
     * @return \UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestHandlingUnits[]
     */
    public function getHandlingUnits()
    {
        return $this->container['handling_units'];
    }

    /**
     * Sets handling_units
     *
     * @param \UPS\TForceFreightRating\TForceFreightRating\FreightRateRequestHandlingUnits[] $handling_units handling_units
     *
     * @return $this
     */
    public function setHandlingUnits($handling_units)
    {
        $this->container['handling_units'] = $handling_units;

        return $this;
    }

    /**
     * Gets adjusted_height_indicator
     *
     * @return string
     */
    public function getAdjustedHeightIndicator()
    {
        return $this->container['adjusted_height_indicator'];
    }

    /**
     * Sets adjusted_height_indicator
     *
     * @param string $adjusted_height_indicator The presence of the AdjustedHeightIndicator indicates that allow the height reduction adjustment for density based rate request.
     *
     * @return $this
     */
    public function setAdjustedHeightIndicator($adjusted_height_indicator)
    {
        $this->container['adjusted_height_indicator'] = $adjusted_height_indicator;

        return $this;
    }

    /**
     * Gets density_eligible_indicator
     *
     * @return string
     */
    public function getDensityEligibleIndicator()
    {
        return $this->container['density_eligible_indicator'];
    }

    /**
     * Sets density_eligible_indicator
     *
     * @param string $density_eligible_indicator The presence of the tag indicates that the rate request is density based. For Density Based Rating (DBR), the customer must have DBR Contract Service.
     *
     * @return $this
     */
    public function setDensityEligibleIndicator($density_eligible_indicator)
    {
        $this->container['density_eligible_indicator'] = $density_eligible_indicator;

        return $this;
    }

    /**
     * Gets quote_number_indicator
     *
     * @return string
     */
    public function getQuoteNumberIndicator()
    {
        return $this->container['quote_number_indicator'];
    }

    /**
     * Sets quote_number_indicator
     *
     * @param string $quote_number_indicator The presence of this indicator means a Quote Number will be returned for this LTL Freight Rate quote request.
     *
     * @return $this
     */
    public function setQuoteNumberIndicator($quote_number_indicator)
    {
        $this->container['quote_number_indicator'] = $quote_number_indicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
