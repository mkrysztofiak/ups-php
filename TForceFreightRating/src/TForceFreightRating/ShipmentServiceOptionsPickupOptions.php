<?php
/**
 * ShipmentServiceOptionsPickupOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  UPS\TForceFreightRating
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Freight Rate
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UPS\TForceFreightRating\TForceFreightRating;

use \ArrayAccess;
use \UPS\TForceFreightRating\ObjectSerializer;

/**
 * ShipmentServiceOptionsPickupOptions Class Doc Comment
 *
 * @category Class
 * @description PickupOptions Container.
 * @package  UPS\TForceFreightRating
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShipmentServiceOptionsPickupOptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShipmentServiceOptions_PickupOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'holiday_pickup_indicator' => 'string',
        'inside_pickup_indicator' => 'string',
        'residential_pickup_indicator' => 'string',
        'weekend_pickup_indicator' => 'string',
        'lift_gate_required_indicator' => 'string',
        'limited_access_pickup_indicator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'holiday_pickup_indicator' => null,
        'inside_pickup_indicator' => null,
        'residential_pickup_indicator' => null,
        'weekend_pickup_indicator' => null,
        'lift_gate_required_indicator' => null,
        'limited_access_pickup_indicator' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'holiday_pickup_indicator' => 'HolidayPickupIndicator',
        'inside_pickup_indicator' => 'InsidePickupIndicator',
        'residential_pickup_indicator' => 'ResidentialPickupIndicator',
        'weekend_pickup_indicator' => 'WeekendPickupIndicator',
        'lift_gate_required_indicator' => 'LiftGateRequiredIndicator',
        'limited_access_pickup_indicator' => 'LimitedAccessPickupIndicator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'holiday_pickup_indicator' => 'setHolidayPickupIndicator',
        'inside_pickup_indicator' => 'setInsidePickupIndicator',
        'residential_pickup_indicator' => 'setResidentialPickupIndicator',
        'weekend_pickup_indicator' => 'setWeekendPickupIndicator',
        'lift_gate_required_indicator' => 'setLiftGateRequiredIndicator',
        'limited_access_pickup_indicator' => 'setLimitedAccessPickupIndicator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'holiday_pickup_indicator' => 'getHolidayPickupIndicator',
        'inside_pickup_indicator' => 'getInsidePickupIndicator',
        'residential_pickup_indicator' => 'getResidentialPickupIndicator',
        'weekend_pickup_indicator' => 'getWeekendPickupIndicator',
        'lift_gate_required_indicator' => 'getLiftGateRequiredIndicator',
        'limited_access_pickup_indicator' => 'getLimitedAccessPickupIndicator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['holiday_pickup_indicator'] = isset($data['holiday_pickup_indicator']) ? $data['holiday_pickup_indicator'] : null;
        $this->container['inside_pickup_indicator'] = isset($data['inside_pickup_indicator']) ? $data['inside_pickup_indicator'] : null;
        $this->container['residential_pickup_indicator'] = isset($data['residential_pickup_indicator']) ? $data['residential_pickup_indicator'] : null;
        $this->container['weekend_pickup_indicator'] = isset($data['weekend_pickup_indicator']) ? $data['weekend_pickup_indicator'] : null;
        $this->container['lift_gate_required_indicator'] = isset($data['lift_gate_required_indicator']) ? $data['lift_gate_required_indicator'] : null;
        $this->container['limited_access_pickup_indicator'] = isset($data['limited_access_pickup_indicator']) ? $data['limited_access_pickup_indicator'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets holiday_pickup_indicator
     *
     * @return string
     */
    public function getHolidayPickupIndicator()
    {
        return $this->container['holiday_pickup_indicator'];
    }

    /**
     * Sets holiday_pickup_indicator
     *
     * @param string $holiday_pickup_indicator The presence of the tag HolidayPickupIndicator indicates that the shipment requires a holiday pickup.
     *
     * @return $this
     */
    public function setHolidayPickupIndicator($holiday_pickup_indicator)
    {
        $this->container['holiday_pickup_indicator'] = $holiday_pickup_indicator;

        return $this;
    }

    /**
     * Gets inside_pickup_indicator
     *
     * @return string
     */
    public function getInsidePickupIndicator()
    {
        return $this->container['inside_pickup_indicator'];
    }

    /**
     * Sets inside_pickup_indicator
     *
     * @param string $inside_pickup_indicator The presence of the tag InsidePickupIndicator indicates that the shipment requires an inside pickup.
     *
     * @return $this
     */
    public function setInsidePickupIndicator($inside_pickup_indicator)
    {
        $this->container['inside_pickup_indicator'] = $inside_pickup_indicator;

        return $this;
    }

    /**
     * Gets residential_pickup_indicator
     *
     * @return string
     */
    public function getResidentialPickupIndicator()
    {
        return $this->container['residential_pickup_indicator'];
    }

    /**
     * Sets residential_pickup_indicator
     *
     * @param string $residential_pickup_indicator The presence of the tag ResidentialPickupIndicator indicates that the shipment requires a residential pickup.
     *
     * @return $this
     */
    public function setResidentialPickupIndicator($residential_pickup_indicator)
    {
        $this->container['residential_pickup_indicator'] = $residential_pickup_indicator;

        return $this;
    }

    /**
     * Gets weekend_pickup_indicator
     *
     * @return string
     */
    public function getWeekendPickupIndicator()
    {
        return $this->container['weekend_pickup_indicator'];
    }

    /**
     * Sets weekend_pickup_indicator
     *
     * @param string $weekend_pickup_indicator The presence of the tag WeekendPickupIndicator indicates that the shipment requires a weekend pickup.
     *
     * @return $this
     */
    public function setWeekendPickupIndicator($weekend_pickup_indicator)
    {
        $this->container['weekend_pickup_indicator'] = $weekend_pickup_indicator;

        return $this;
    }

    /**
     * Gets lift_gate_required_indicator
     *
     * @return string
     */
    public function getLiftGateRequiredIndicator()
    {
        return $this->container['lift_gate_required_indicator'];
    }

    /**
     * Sets lift_gate_required_indicator
     *
     * @param string $lift_gate_required_indicator The presence of the tag LiftGateRequiredIndicator indicates that the shipment requires a lift gate.
     *
     * @return $this
     */
    public function setLiftGateRequiredIndicator($lift_gate_required_indicator)
    {
        $this->container['lift_gate_required_indicator'] = $lift_gate_required_indicator;

        return $this;
    }

    /**
     * Gets limited_access_pickup_indicator
     *
     * @return string
     */
    public function getLimitedAccessPickupIndicator()
    {
        return $this->container['limited_access_pickup_indicator'];
    }

    /**
     * Sets limited_access_pickup_indicator
     *
     * @param string $limited_access_pickup_indicator The presence of the tag LimitedAccessPickupIndicator indicates that there is limited access for pickups
     *
     * @return $this
     */
    public function setLimitedAccessPickupIndicator($limited_access_pickup_indicator)
    {
        $this->container['limited_access_pickup_indicator'] = $limited_access_pickup_indicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
