<?php
/**
 * FreightShipResponseShipmentResults
 *
 * PHP version 5
 *
 * @category Class
 * @package  UPS\TForceFreightShipping
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Freight Ship
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UPS\TForceFreightShipping\TForceFreightShipping;

use \ArrayAccess;
use \UPS\TForceFreightShipping\ObjectSerializer;

/**
 * FreightShipResponseShipmentResults Class Doc Comment
 *
 * @category Class
 * @description ShipmentResults Container.
 * @package  UPS\TForceFreightShipping
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FreightShipResponseShipmentResults implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FreightShipResponse_ShipmentResults';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'pickup_request_confirmation_number' => 'string',
        'delivery_date' => 'string',
        'shipment_number' => 'string',
        'bolid' => 'string',
        'guaranteed_indicator' => 'string',
        'minimum_charge_applied_indicator' => 'string',
        'rate' => '\UPS\TForceFreightShipping\TForceFreightShipping\ShipmentResultsRate[]',
        'freight_density_rate' => '\UPS\TForceFreightShipping\TForceFreightShipping\ShipmentResultsFreightDensityRate',
        'total_shipment_charge' => '\UPS\TForceFreightShipping\TForceFreightShipping\ShipmentResultsTotalShipmentCharge',
        'billable_shipment_weight' => '\UPS\TForceFreightShipping\TForceFreightShipping\ShipmentResultsBillableShipmentWeight',
        'service' => '\UPS\TForceFreightShipping\TForceFreightShipping\ShipmentResultsService',
        'documents' => '\UPS\TForceFreightShipping\TForceFreightShipping\ShipmentResultsDocuments',
        'time_in_transit' => '\UPS\TForceFreightShipping\TForceFreightShipping\ShipmentResultsTimeInTransit'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'pickup_request_confirmation_number' => null,
        'delivery_date' => null,
        'shipment_number' => null,
        'bolid' => null,
        'guaranteed_indicator' => null,
        'minimum_charge_applied_indicator' => null,
        'rate' => null,
        'freight_density_rate' => null,
        'total_shipment_charge' => null,
        'billable_shipment_weight' => null,
        'service' => null,
        'documents' => null,
        'time_in_transit' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pickup_request_confirmation_number' => 'PickupRequestConfirmationNumber',
        'delivery_date' => 'DeliveryDate',
        'shipment_number' => 'ShipmentNumber',
        'bolid' => 'BOLID',
        'guaranteed_indicator' => 'GuaranteedIndicator',
        'minimum_charge_applied_indicator' => 'MinimumChargeAppliedIndicator',
        'rate' => 'Rate',
        'freight_density_rate' => 'FreightDensityRate',
        'total_shipment_charge' => 'TotalShipmentCharge',
        'billable_shipment_weight' => 'BillableShipmentWeight',
        'service' => 'Service',
        'documents' => 'Documents',
        'time_in_transit' => 'TimeInTransit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pickup_request_confirmation_number' => 'setPickupRequestConfirmationNumber',
        'delivery_date' => 'setDeliveryDate',
        'shipment_number' => 'setShipmentNumber',
        'bolid' => 'setBolid',
        'guaranteed_indicator' => 'setGuaranteedIndicator',
        'minimum_charge_applied_indicator' => 'setMinimumChargeAppliedIndicator',
        'rate' => 'setRate',
        'freight_density_rate' => 'setFreightDensityRate',
        'total_shipment_charge' => 'setTotalShipmentCharge',
        'billable_shipment_weight' => 'setBillableShipmentWeight',
        'service' => 'setService',
        'documents' => 'setDocuments',
        'time_in_transit' => 'setTimeInTransit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pickup_request_confirmation_number' => 'getPickupRequestConfirmationNumber',
        'delivery_date' => 'getDeliveryDate',
        'shipment_number' => 'getShipmentNumber',
        'bolid' => 'getBolid',
        'guaranteed_indicator' => 'getGuaranteedIndicator',
        'minimum_charge_applied_indicator' => 'getMinimumChargeAppliedIndicator',
        'rate' => 'getRate',
        'freight_density_rate' => 'getFreightDensityRate',
        'total_shipment_charge' => 'getTotalShipmentCharge',
        'billable_shipment_weight' => 'getBillableShipmentWeight',
        'service' => 'getService',
        'documents' => 'getDocuments',
        'time_in_transit' => 'getTimeInTransit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pickup_request_confirmation_number'] = isset($data['pickup_request_confirmation_number']) ? $data['pickup_request_confirmation_number'] : null;
        $this->container['delivery_date'] = isset($data['delivery_date']) ? $data['delivery_date'] : null;
        $this->container['shipment_number'] = isset($data['shipment_number']) ? $data['shipment_number'] : null;
        $this->container['bolid'] = isset($data['bolid']) ? $data['bolid'] : null;
        $this->container['guaranteed_indicator'] = isset($data['guaranteed_indicator']) ? $data['guaranteed_indicator'] : null;
        $this->container['minimum_charge_applied_indicator'] = isset($data['minimum_charge_applied_indicator']) ? $data['minimum_charge_applied_indicator'] : null;
        $this->container['rate'] = isset($data['rate']) ? $data['rate'] : null;
        $this->container['freight_density_rate'] = isset($data['freight_density_rate']) ? $data['freight_density_rate'] : null;
        $this->container['total_shipment_charge'] = isset($data['total_shipment_charge']) ? $data['total_shipment_charge'] : null;
        $this->container['billable_shipment_weight'] = isset($data['billable_shipment_weight']) ? $data['billable_shipment_weight'] : null;
        $this->container['service'] = isset($data['service']) ? $data['service'] : null;
        $this->container['documents'] = isset($data['documents']) ? $data['documents'] : null;
        $this->container['time_in_transit'] = isset($data['time_in_transit']) ? $data['time_in_transit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pickup_request_confirmation_number
     *
     * @return string
     */
    public function getPickupRequestConfirmationNumber()
    {
        return $this->container['pickup_request_confirmation_number'];
    }

    /**
     * Sets pickup_request_confirmation_number
     *
     * @param string $pickup_request_confirmation_number Shipment pickup number.
     *
     * @return $this
     */
    public function setPickupRequestConfirmationNumber($pickup_request_confirmation_number)
    {
        $this->container['pickup_request_confirmation_number'] = $pickup_request_confirmation_number;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return string
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param string $delivery_date Estimated date that the shipment will be delivered.   Format: YYYYMMDD.
     *
     * @return $this
     */
    public function setDeliveryDate($delivery_date)
    {
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets shipment_number
     *
     * @return string
     */
    public function getShipmentNumber()
    {
        return $this->container['shipment_number'];
    }

    /**
     * Sets shipment_number
     *
     * @param string $shipment_number The shipment Number assigned to the shipment.
     *
     * @return $this
     */
    public function setShipmentNumber($shipment_number)
    {
        $this->container['shipment_number'] = $shipment_number;

        return $this;
    }

    /**
     * Gets bolid
     *
     * @return string
     */
    public function getBolid()
    {
        return $this->container['bolid'];
    }

    /**
     * Sets bolid
     *
     * @param string $bolid The retrieval key for the stored BOL.
     *
     * @return $this
     */
    public function setBolid($bolid)
    {
        $this->container['bolid'] = $bolid;

        return $this;
    }

    /**
     * Gets guaranteed_indicator
     *
     * @return string
     */
    public function getGuaranteedIndicator()
    {
        return $this->container['guaranteed_indicator'];
    }

    /**
     * Sets guaranteed_indicator
     *
     * @param string $guaranteed_indicator This indicator indicates that the rate returned is guaranteed. Can only be returned if the billing option is prepaid.
     *
     * @return $this
     */
    public function setGuaranteedIndicator($guaranteed_indicator)
    {
        $this->container['guaranteed_indicator'] = $guaranteed_indicator;

        return $this;
    }

    /**
     * Gets minimum_charge_applied_indicator
     *
     * @return string
     */
    public function getMinimumChargeAppliedIndicator()
    {
        return $this->container['minimum_charge_applied_indicator'];
    }

    /**
     * Sets minimum_charge_applied_indicator
     *
     * @param string $minimum_charge_applied_indicator This is an empty tag. The presence of the tag indicates the rate returned has a minimum charge applied to it. Can only be returned if the billing option is prepaid.
     *
     * @return $this
     */
    public function setMinimumChargeAppliedIndicator($minimum_charge_applied_indicator)
    {
        $this->container['minimum_charge_applied_indicator'] = $minimum_charge_applied_indicator;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return \UPS\TForceFreightShipping\TForceFreightShipping\ShipmentResultsRate[]
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param \UPS\TForceFreightShipping\TForceFreightShipping\ShipmentResultsRate[] $rate rate
     *
     * @return $this
     */
    public function setRate($rate)
    {
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets freight_density_rate
     *
     * @return \UPS\TForceFreightShipping\TForceFreightShipping\ShipmentResultsFreightDensityRate
     */
    public function getFreightDensityRate()
    {
        return $this->container['freight_density_rate'];
    }

    /**
     * Sets freight_density_rate
     *
     * @param \UPS\TForceFreightShipping\TForceFreightShipping\ShipmentResultsFreightDensityRate $freight_density_rate freight_density_rate
     *
     * @return $this
     */
    public function setFreightDensityRate($freight_density_rate)
    {
        $this->container['freight_density_rate'] = $freight_density_rate;

        return $this;
    }

    /**
     * Gets total_shipment_charge
     *
     * @return \UPS\TForceFreightShipping\TForceFreightShipping\ShipmentResultsTotalShipmentCharge
     */
    public function getTotalShipmentCharge()
    {
        return $this->container['total_shipment_charge'];
    }

    /**
     * Sets total_shipment_charge
     *
     * @param \UPS\TForceFreightShipping\TForceFreightShipping\ShipmentResultsTotalShipmentCharge $total_shipment_charge total_shipment_charge
     *
     * @return $this
     */
    public function setTotalShipmentCharge($total_shipment_charge)
    {
        $this->container['total_shipment_charge'] = $total_shipment_charge;

        return $this;
    }

    /**
     * Gets billable_shipment_weight
     *
     * @return \UPS\TForceFreightShipping\TForceFreightShipping\ShipmentResultsBillableShipmentWeight
     */
    public function getBillableShipmentWeight()
    {
        return $this->container['billable_shipment_weight'];
    }

    /**
     * Sets billable_shipment_weight
     *
     * @param \UPS\TForceFreightShipping\TForceFreightShipping\ShipmentResultsBillableShipmentWeight $billable_shipment_weight billable_shipment_weight
     *
     * @return $this
     */
    public function setBillableShipmentWeight($billable_shipment_weight)
    {
        $this->container['billable_shipment_weight'] = $billable_shipment_weight;

        return $this;
    }

    /**
     * Gets service
     *
     * @return \UPS\TForceFreightShipping\TForceFreightShipping\ShipmentResultsService
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     *
     * @param \UPS\TForceFreightShipping\TForceFreightShipping\ShipmentResultsService $service service
     *
     * @return $this
     */
    public function setService($service)
    {
        $this->container['service'] = $service;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return \UPS\TForceFreightShipping\TForceFreightShipping\ShipmentResultsDocuments
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param \UPS\TForceFreightShipping\TForceFreightShipping\ShipmentResultsDocuments $documents documents
     *
     * @return $this
     */
    public function setDocuments($documents)
    {
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets time_in_transit
     *
     * @return \UPS\TForceFreightShipping\TForceFreightShipping\ShipmentResultsTimeInTransit
     */
    public function getTimeInTransit()
    {
        return $this->container['time_in_transit'];
    }

    /**
     * Sets time_in_transit
     *
     * @param \UPS\TForceFreightShipping\TForceFreightShipping\ShipmentResultsTimeInTransit $time_in_transit time_in_transit
     *
     * @return $this
     */
    public function setTimeInTransit($time_in_transit)
    {
        $this->container['time_in_transit'] = $time_in_transit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
