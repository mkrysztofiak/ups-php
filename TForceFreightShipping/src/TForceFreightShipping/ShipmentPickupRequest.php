<?php
/**
 * ShipmentPickupRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  UPS\TForceFreightShipping
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Freight Ship
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UPS\TForceFreightShipping\TForceFreightShipping;

use \ArrayAccess;
use \UPS\TForceFreightShipping\ObjectSerializer;

/**
 * ShipmentPickupRequest Class Doc Comment
 *
 * @category Class
 * @description PickupRequest Container.
 * @package  UPS\TForceFreightShipping
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShipmentPickupRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Shipment_PickupRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'additional_comments' => 'string',
        'requester' => '\UPS\TForceFreightShipping\TForceFreightShipping\PickupRequestRequester',
        'pickup_date' => 'string',
        'earliest_time_ready' => 'string',
        'latest_time_ready' => 'string',
        'pom' => '\UPS\TForceFreightShipping\TForceFreightShipping\PickupRequestPOM'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'additional_comments' => null,
        'requester' => null,
        'pickup_date' => null,
        'earliest_time_ready' => null,
        'latest_time_ready' => null,
        'pom' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_comments' => 'AdditionalComments',
        'requester' => 'Requester',
        'pickup_date' => 'PickupDate',
        'earliest_time_ready' => 'EarliestTimeReady',
        'latest_time_ready' => 'LatestTimeReady',
        'pom' => 'POM'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additional_comments' => 'setAdditionalComments',
        'requester' => 'setRequester',
        'pickup_date' => 'setPickupDate',
        'earliest_time_ready' => 'setEarliestTimeReady',
        'latest_time_ready' => 'setLatestTimeReady',
        'pom' => 'setPom'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additional_comments' => 'getAdditionalComments',
        'requester' => 'getRequester',
        'pickup_date' => 'getPickupDate',
        'earliest_time_ready' => 'getEarliestTimeReady',
        'latest_time_ready' => 'getLatestTimeReady',
        'pom' => 'getPom'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['additional_comments'] = isset($data['additional_comments']) ? $data['additional_comments'] : null;
        $this->container['requester'] = isset($data['requester']) ? $data['requester'] : null;
        $this->container['pickup_date'] = isset($data['pickup_date']) ? $data['pickup_date'] : null;
        $this->container['earliest_time_ready'] = isset($data['earliest_time_ready']) ? $data['earliest_time_ready'] : null;
        $this->container['latest_time_ready'] = isset($data['latest_time_ready']) ? $data['latest_time_ready'] : null;
        $this->container['pom'] = isset($data['pom']) ? $data['pom'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['pickup_date'] === null) {
            $invalidProperties[] = "'pickup_date' can't be null";
        }
        if ($this->container['latest_time_ready'] === null) {
            $invalidProperties[] = "'latest_time_ready' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additional_comments
     *
     * @return string
     */
    public function getAdditionalComments()
    {
        return $this->container['additional_comments'];
    }

    /**
     * Sets additional_comments
     *
     * @param string $additional_comments Additional pickup comments or instructions
     *
     * @return $this
     */
    public function setAdditionalComments($additional_comments)
    {
        $this->container['additional_comments'] = $additional_comments;

        return $this;
    }

    /**
     * Gets requester
     *
     * @return \UPS\TForceFreightShipping\TForceFreightShipping\PickupRequestRequester
     */
    public function getRequester()
    {
        return $this->container['requester'];
    }

    /**
     * Sets requester
     *
     * @param \UPS\TForceFreightShipping\TForceFreightShipping\PickupRequestRequester $requester requester
     *
     * @return $this
     */
    public function setRequester($requester)
    {
        $this->container['requester'] = $requester;

        return $this;
    }

    /**
     * Gets pickup_date
     *
     * @return string
     */
    public function getPickupDate()
    {
        return $this->container['pickup_date'];
    }

    /**
     * Sets pickup_date
     *
     * @param string $pickup_date Date of the Pickup.  Format: YYYYMMDD. Ground pickup may be scheduled up to 42 days in the future. Note: This element will act as PickupDate or DropOffDate based on the presence of PickupTimeReady or DropOffTimeReady element.
     *
     * @return $this
     */
    public function setPickupDate($pickup_date)
    {
        $this->container['pickup_date'] = $pickup_date;

        return $this;
    }

    /**
     * Gets earliest_time_ready
     *
     * @return string
     */
    public function getEarliestTimeReady()
    {
        return $this->container['earliest_time_ready'];
    }

    /**
     * Sets earliest_time_ready
     *
     * @param string $earliest_time_ready The earliest time a shipment is ready to be picked up. The time is on a 24 hour clock.  Format: HHMM HH = Hour values 00 to 23 MM = Minute values 00 to 59
     *
     * @return $this
     */
    public function setEarliestTimeReady($earliest_time_ready)
    {
        $this->container['earliest_time_ready'] = $earliest_time_ready;

        return $this;
    }

    /**
     * Gets latest_time_ready
     *
     * @return string
     */
    public function getLatestTimeReady()
    {
        return $this->container['latest_time_ready'];
    }

    /**
     * Sets latest_time_ready
     *
     * @param string $latest_time_ready The latest time a shipment can be picked up. Can be also referred as the Closing Time for a pickup time window. The time is on a 24 hour clock.  Format: HHMM HH = Hour values 00 to 23 MM = Minute values 00 to 59 Optional if the account type is House.
     *
     * @return $this
     */
    public function setLatestTimeReady($latest_time_ready)
    {
        $this->container['latest_time_ready'] = $latest_time_ready;

        return $this;
    }

    /**
     * Gets pom
     *
     * @return \UPS\TForceFreightShipping\TForceFreightShipping\PickupRequestPOM
     */
    public function getPom()
    {
        return $this->container['pom'];
    }

    /**
     * Sets pom
     *
     * @param \UPS\TForceFreightShipping\TForceFreightShipping\PickupRequestPOM $pom pom
     *
     * @return $this
     */
    public function setPom($pom)
    {
        $this->container['pom'] = $pom;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
