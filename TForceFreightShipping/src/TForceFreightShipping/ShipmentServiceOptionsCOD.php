<?php
/**
 * ShipmentServiceOptionsCOD
 *
 * PHP version 5
 *
 * @category Class
 * @package  UPS\TForceFreightShipping
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Freight Ship
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UPS\TForceFreightShipping\TForceFreightShipping;

use \ArrayAccess;
use \UPS\TForceFreightShipping\ObjectSerializer;

/**
 * ShipmentServiceOptionsCOD Class Doc Comment
 *
 * @category Class
 * @description COD Container.
 * @package  UPS\TForceFreightShipping
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShipmentServiceOptionsCOD implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShipmentServiceOptions_COD';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cod_value' => '\UPS\TForceFreightShipping\TForceFreightShipping\CODCODValue',
        'cod_payment_method' => '\UPS\TForceFreightShipping\TForceFreightShipping\CODCODPaymentMethod',
        'cod_billing_option' => '\UPS\TForceFreightShipping\TForceFreightShipping\CODCODBillingOption',
        'remit_to' => '\UPS\TForceFreightShipping\TForceFreightShipping\CODRemitTo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cod_value' => null,
        'cod_payment_method' => null,
        'cod_billing_option' => null,
        'remit_to' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cod_value' => 'CODValue',
        'cod_payment_method' => 'CODPaymentMethod',
        'cod_billing_option' => 'CODBillingOption',
        'remit_to' => 'RemitTo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cod_value' => 'setCodValue',
        'cod_payment_method' => 'setCodPaymentMethod',
        'cod_billing_option' => 'setCodBillingOption',
        'remit_to' => 'setRemitTo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cod_value' => 'getCodValue',
        'cod_payment_method' => 'getCodPaymentMethod',
        'cod_billing_option' => 'getCodBillingOption',
        'remit_to' => 'getRemitTo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cod_value'] = isset($data['cod_value']) ? $data['cod_value'] : null;
        $this->container['cod_payment_method'] = isset($data['cod_payment_method']) ? $data['cod_payment_method'] : null;
        $this->container['cod_billing_option'] = isset($data['cod_billing_option']) ? $data['cod_billing_option'] : null;
        $this->container['remit_to'] = isset($data['remit_to']) ? $data['remit_to'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cod_value'] === null) {
            $invalidProperties[] = "'cod_value' can't be null";
        }
        if ($this->container['cod_payment_method'] === null) {
            $invalidProperties[] = "'cod_payment_method' can't be null";
        }
        if ($this->container['cod_billing_option'] === null) {
            $invalidProperties[] = "'cod_billing_option' can't be null";
        }
        if ($this->container['remit_to'] === null) {
            $invalidProperties[] = "'remit_to' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cod_value
     *
     * @return \UPS\TForceFreightShipping\TForceFreightShipping\CODCODValue
     */
    public function getCodValue()
    {
        return $this->container['cod_value'];
    }

    /**
     * Sets cod_value
     *
     * @param \UPS\TForceFreightShipping\TForceFreightShipping\CODCODValue $cod_value cod_value
     *
     * @return $this
     */
    public function setCodValue($cod_value)
    {
        $this->container['cod_value'] = $cod_value;

        return $this;
    }

    /**
     * Gets cod_payment_method
     *
     * @return \UPS\TForceFreightShipping\TForceFreightShipping\CODCODPaymentMethod
     */
    public function getCodPaymentMethod()
    {
        return $this->container['cod_payment_method'];
    }

    /**
     * Sets cod_payment_method
     *
     * @param \UPS\TForceFreightShipping\TForceFreightShipping\CODCODPaymentMethod $cod_payment_method cod_payment_method
     *
     * @return $this
     */
    public function setCodPaymentMethod($cod_payment_method)
    {
        $this->container['cod_payment_method'] = $cod_payment_method;

        return $this;
    }

    /**
     * Gets cod_billing_option
     *
     * @return \UPS\TForceFreightShipping\TForceFreightShipping\CODCODBillingOption
     */
    public function getCodBillingOption()
    {
        return $this->container['cod_billing_option'];
    }

    /**
     * Sets cod_billing_option
     *
     * @param \UPS\TForceFreightShipping\TForceFreightShipping\CODCODBillingOption $cod_billing_option cod_billing_option
     *
     * @return $this
     */
    public function setCodBillingOption($cod_billing_option)
    {
        $this->container['cod_billing_option'] = $cod_billing_option;

        return $this;
    }

    /**
     * Gets remit_to
     *
     * @return \UPS\TForceFreightShipping\TForceFreightShipping\CODRemitTo
     */
    public function getRemitTo()
    {
        return $this->container['remit_to'];
    }

    /**
     * Sets remit_to
     *
     * @param \UPS\TForceFreightShipping\TForceFreightShipping\CODRemitTo $remit_to remit_to
     *
     * @return $this
     */
    public function setRemitTo($remit_to)
    {
        $this->container['remit_to'] = $remit_to;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
